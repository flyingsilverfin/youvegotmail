
Youve_Got_Mail.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000058  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001ee  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000015d  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001bc  00000000  00000000  000004df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000078  00000000  00000000  0000069c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000196  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000044  00000000  00000000  000008aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000038  00000000  00000000  000008ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	1a c0       	rjmp	.+52     	; 0x38 <__bad_interrupt>
   4:	19 c0       	rjmp	.+50     	; 0x38 <__bad_interrupt>
   6:	18 c0       	rjmp	.+48     	; 0x38 <__bad_interrupt>
   8:	17 c0       	rjmp	.+46     	; 0x38 <__bad_interrupt>
   a:	16 c0       	rjmp	.+44     	; 0x38 <__bad_interrupt>
   c:	15 c0       	rjmp	.+42     	; 0x38 <__bad_interrupt>
   e:	14 c0       	rjmp	.+40     	; 0x38 <__bad_interrupt>
  10:	13 c0       	rjmp	.+38     	; 0x38 <__bad_interrupt>
  12:	12 c0       	rjmp	.+36     	; 0x38 <__bad_interrupt>
  14:	11 c0       	rjmp	.+34     	; 0x38 <__bad_interrupt>
  16:	10 c0       	rjmp	.+32     	; 0x38 <__bad_interrupt>
  18:	0f c0       	rjmp	.+30     	; 0x38 <__bad_interrupt>
  1a:	0e c0       	rjmp	.+28     	; 0x38 <__bad_interrupt>
  1c:	0d c0       	rjmp	.+26     	; 0x38 <__bad_interrupt>
  1e:	0c c0       	rjmp	.+24     	; 0x38 <__bad_interrupt>
  20:	0b c0       	rjmp	.+22     	; 0x38 <__bad_interrupt>
  22:	0a c0       	rjmp	.+20     	; 0x38 <__bad_interrupt>
  24:	09 c0       	rjmp	.+18     	; 0x38 <__bad_interrupt>
  26:	08 c0       	rjmp	.+16     	; 0x38 <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d1 e0       	ldi	r29, 0x01	; 1
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61
  34:	38 d0       	rcall	.+112    	; 0xa6 <main>
  36:	3e c0       	rjmp	.+124    	; 0xb4 <_exit>

00000038 <__bad_interrupt>:
  38:	e3 cf       	rjmp	.-58     	; 0x0 <__vectors>

0000003a <Delay_Ms>:
void Delay_Ms(uint16_t ms)
{
	uint32_t Delay_Cycles;
	
	
	for (Delay_Cycles = (ms * (1000000/10000)) ; Delay_Cycles > 0 ; Delay_Cycles--);
  3a:	a0 e0       	ldi	r26, 0x00	; 0
  3c:	b0 e0       	ldi	r27, 0x00	; 0
  3e:	88 0f       	add	r24, r24
  40:	99 1f       	adc	r25, r25
  42:	aa 1f       	adc	r26, r26
  44:	bb 1f       	adc	r27, r27
  46:	88 0f       	add	r24, r24
  48:	99 1f       	adc	r25, r25
  4a:	aa 1f       	adc	r26, r26
  4c:	bb 1f       	adc	r27, r27
  4e:	ac 01       	movw	r20, r24
  50:	bd 01       	movw	r22, r26
  52:	44 0f       	add	r20, r20
  54:	55 1f       	adc	r21, r21
  56:	66 1f       	adc	r22, r22
  58:	77 1f       	adc	r23, r23
  5a:	44 0f       	add	r20, r20
  5c:	55 1f       	adc	r21, r21
  5e:	66 1f       	adc	r22, r22
  60:	77 1f       	adc	r23, r23
  62:	84 0f       	add	r24, r20
  64:	95 1f       	adc	r25, r21
  66:	a6 1f       	adc	r26, r22
  68:	b7 1f       	adc	r27, r23
  6a:	ac 01       	movw	r20, r24
  6c:	bd 01       	movw	r22, r26
  6e:	44 0f       	add	r20, r20
  70:	55 1f       	adc	r21, r21
  72:	66 1f       	adc	r22, r22
  74:	77 1f       	adc	r23, r23
  76:	44 0f       	add	r20, r20
  78:	55 1f       	adc	r21, r21
  7a:	66 1f       	adc	r22, r22
  7c:	77 1f       	adc	r23, r23
  7e:	84 0f       	add	r24, r20
  80:	95 1f       	adc	r25, r21
  82:	a6 1f       	adc	r26, r22
  84:	b7 1f       	adc	r27, r23
  86:	00 97       	sbiw	r24, 0x00	; 0
  88:	a1 05       	cpc	r26, r1
  8a:	b1 05       	cpc	r27, r1
  8c:	39 f0       	breq	.+14     	; 0x9c <__SREG__+0x5d>
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	a1 09       	sbc	r26, r1
  92:	b1 09       	sbc	r27, r1
  94:	00 97       	sbiw	r24, 0x00	; 0
  96:	a1 05       	cpc	r26, r1
  98:	b1 05       	cpc	r27, r1
  9a:	c9 f7       	brne	.-14     	; 0x8e <__SREG__+0x4f>
  9c:	08 95       	ret

0000009e <Init>:
}

void Init(void)
{
	// Define Output Pins
	DDRC = DDRC |(1<<DDC0); // PC0 is digital output
  9e:	38 9a       	sbi	0x07, 0	; 7
	
	//Return_5();
	
	while(1)
	{
		PINC = (1<<PINC0); // Toggle PC0
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	86 b9       	out	0x06, r24	; 6
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <Init+0x4>

000000a6 <main>:
#include "User.h"

int main(void)
{
//	Return_5();
	Init();
  a6:	fb df       	rcall	.-10     	; 0x9e <Init>
	
	while(1)
    {
		while(1)
		{
			PINC = (1<<PINC0); // Toggle PC0
  a8:	c1 e0       	ldi	r28, 0x01	; 1
  aa:	c6 b9       	out	0x06, r28	; 6
			Delay_Ms(1000);
  ac:	88 ee       	ldi	r24, 0xE8	; 232
  ae:	93 e0       	ldi	r25, 0x03	; 3
  b0:	c4 df       	rcall	.-120    	; 0x3a <Delay_Ms>
  b2:	fb cf       	rjmp	.-10     	; 0xaa <main+0x4>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
